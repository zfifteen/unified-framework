{
  "Comprehensive Validation Report": {
    "timestamp": "2025-08-08T21:44:13.538884",
    "dataset_info": {
      "n_max": 2500,
      "n_primes": 367,
      "n_composites": 2132
    },
    "statistical_claims_validation": {
      "pearson_correlation": {
        "claimed": "r \u2248 0.93",
        "observed": "r = -0.0099",
        "p_value": "9.2223e-01",
        "confidence_interval_95": [
          -0.20645679360479768,
          0.1716215297740889
        ],
        "validation_status": "\u2717 NOT VALIDATED"
      },
      "ks_statistic": {
        "claimed": "KS \u2248 0.04",
        "observed": "KS = 0.0260",
        "p_value": "9.8003e-01",
        "validation_status": "\u2713 VALIDATED"
      },
      "chiral_distinction": {
        "claimed": "> 0.45",
        "observed": "0.0086",
        "cohens_d": "0.0523",
        "validation_status": "\u2717 NOT VALIDATED"
      },
      "optimal_k_star": {
        "claimed": "k* \u2248 0.3",
        "observed": "k* = 0.100",
        "max_enhancement": "495.9%",
        "multiple_testing_p": "0.1270",
        "validation_status": "\u2717 NOT VALIDATED"
      }
    },
    "robustness_tests": {
      "permutation_test_p_value": "0.1202",
      "bootstrap_confidence_intervals": "Computed for all correlations",
      "multiple_testing_correction": "Applied to k* parameter search"
    },
    "raw_data_files_generated": [
      "k_values.npy - Parameter sweep values",
      "max_enhancements.npy - Enhancement values for each k",
      "prime_curvature_values.npy - Curvature values for primes",
      "composite_curvature_values.npy - Curvature values for composites",
      "zeta_spacing_unfolded.npy - Unfolded zeta zero spacings",
      "prime_chiral_distances.npy - Chiral distance values for primes",
      "composite_chiral_distances.npy - Chiral distance values for composites",
      "correlation_data.json - Complete correlation analysis data"
    ],
    "reproducibility_code": {
      "pearson_correlation": "r, p = stats.pearsonr(a, b)",
      "ks_test": "ks_stat, p = ks_2samp(prime_vals, composite_vals)",
      "cohens_d": "d = (x.mean() - y.mean()) / pooled_std",
      "bootstrap_ci": "ci = np.percentile(bootstrap_rs, [2.5, 97.5])"
    }
  }
}